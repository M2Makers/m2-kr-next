.. _intro:

1장. M2
**********************************

**M2** 는 **Web Service Modernizer** 이다.
M2를 통해 복잡한 백엔드의 수정없이 즉시 최신 트렌드의 콘텐츠를 고객에게 전달할 수 있다.

.. note::

   ``M2`` 의 다양한 유스 케이스는 `Contents Service Patterns <https://csp-kr.readthedocs.io/ko/latest/>`_ 으로 제공된다.



.. toctree::
   :maxdepth: 2


백그라운드
===================

스마트폰의 등장을 기점으로 컴퓨팅 환경은 엄청나게 변화했다.

   -  PC에서 Mobile로
   -  Monolithic Archicurecture에서 Micro-Service Architecture로
   -  Single Core에서 Multi Core로
   -  On-Premise에서 Cloud로


그 반대로 엔드유저의 콘텐츠 소비패턴은 지속적으로 짧아졌다.

   -  오늘 아침 출근길에 검색했던 상품 이미지가 무엇이었나?
   -  지난 주에 보았던 뉴스 기사의 이미지를 기억하는가?
   -  어제 인스타그램에 보았던 사진이 뭐였지?
   

.. figure:: img/nobatch02.png
   :align: center


하지만 **Workload** 를 처리하는 엔터프라이즈의 보수적인 인식은 크게 변하지 않았다.
그 중심에는 **Batch Processing (이하 Batch)** 이 다양한 형태로 자리잡고 있었다. 

   -  Batch process
   -  Migration
   -  Workflow
   -  Pipeline
   -  Legacy System


M2는 웹서비스가 어떻게 본질에 집중하면서 빠르게 변화에 대응해 나갈 것인가에 대한 질문으로부터 시작되었다.



배치는 실패한다.
----------------------------------------

배치의 진행 단계를 살펴보자.

   1. 작업 목록을 작성한다.
   2. 대상 서버들을 산정한다.
   3. 프로세스를 수행한다.
   4. ...........기다린다........
   5. ...기도한다...기도한다...기도한다...기도한다...기도한다
      
      .. figure:: img/nobatch04.png
         :align: center

   6. “Complete” 메시지를 보며 신의 존재를 느낀다.

이 방식은 곧 한계를 드러냈는데 (신이 없었기 때문이 아니라) 배치 프로세스의 근본적인 문제 때문이다.

첫째, **배치는 항상 Legacy를 남긴다.**
레거시는 다소 부정적인 의미를 가지는데 대충 **“구축해서 돌고 있지만, 건드릴 수 없는 시스템”** 정도로 이해할 수 있다. 
최악은 배치를 관리할 목적으로 만들어진 DB(데이터 베이스) 기반 시스템이다. 
DB를 넣는 순간 주객이 전도되어 DB 관리가 첫 번째 미션이 된다.
기획이 바뀌는 순간 모든 배치는 수습해야할 대상이 되버리고 긴 겨울이 시작된다. 

.. figure:: img/nobatch05.png
   :align: center


둘째는 통제 모델의 한계 때문이다. 
배치를 시작하려면 항상 작업규모를 설정해야 한다. 
그리고 최선을 다해서 실행한다. 
이 모델이 매우 당연하게 여겨진다면 다음 문제에 대해 생각해보자.

   - 모든 상품 이미지에 대해 신규 썸네일 해상도를 지원하는데 얼마나 소요될까요?
   - 최신 아이폰 해상도에 맞추어 모든 상품기술서를 변경하는데 얼마나 소요될까요?
   - 상품이 계속 유입되는데 내일 아침 서비스에 노출할 수 있을까요?

서비스가 커질수록 변동성/불확실성은 커지게 되고 임계점을 넘어가는 순간 지금껏 유효했던 해법들은 한계를 드러낸다. 
이러한 기술부채를 갚지 못한다면 영원한 이자를 내야 한다. 


.. note::

   배치는 그 결과물의 가치가 저장/관리 비용보다 높을 때에만 유의미하다. 
   그렇지 않다면 배치는 레거시다.
   그 형태가 프로그램, 파일, DB, 파이프라인 어떤 것이든 이자를 피할 수 없다.




이제는 날아야 할 때
----------------------------------------

``On the fly`` 방식은 ``Batch`` 의 대척점에 서 있다.
무엇도 미리 만들어 두거나 결정하지 않는다.
요청하면 즉시 "연결(Connect)하여 생산한다."
언제나 정보는 최신이며 변화도 즉시 이루어진다.

다음은 On the fly 방식이 바꾸어 놓은 사례들이다.

   - 데이터 마이그레이션과 서비스를 동시에 수행한다.
   - 사용자에게 전달하는 이미지 형태를 즉시 결정하여 배포한다.
   - 사전에 기획된 이메일 마케팅, 이제는 여는 시점에 조합된 최신의 데이터로 생성 후 사용자에게 전달한다.
   - 모든 영역의 콘텐츠를 개인화한다.
   - Mixed Content. 제휴 사업자 컨텐츠가 얼마나 많은지, 얼마나 소비될지 몰라도 대처가 가능하다.
   - 덩치 큰 동영상. 사이즈마다 모두 미리 트랜스코딩하지 않는다. 저장 비용까지 아끼는 것은 덤.
   - 동영상 속 썸네일 이미지 추출. API 콜 하나로 끝.
   - 너무나 긴 상품 이미지. 디자이너가 일일이 자르는 건 그만! 자동화한다.
   - 더 이상 디자이너가 일일이 문구를 수정하지 않는다.


비즈니스 문제를 바라보는 관점의 전환만으로도 믿을 수 없이 유연하고 경제적인 해답을 얻을 수 있다. 

.. note::

   ``On the fly`` 는 기존 인프라의 변화(Change)를 요구하지 않는다.
   그저 기존 방식대로 연결(Connect)할 뿐이다.



M2의 이해
===================

웹 서비스 현대화(Web Service Modernization)는 단순히 이미지나 웹페이지 처럼 눈에 보이는 산출물에 국한되지 않는다.

   - Contents Modernization
   - Process Modernization
   - Operation Modernization
   - Communication Modernization


이상의 M2가 가져오는 4가지 변화를 통해 보다 빠르고 민첩하게(Agile) `BizDevOps <https://enterprisersproject.com/article/2019/9/devops-what-is-bizdevops>`_ 를 수행할 수 있다.


주의할 점은 인식적으로든 기술적으로든 현대화는 하루 아침에 이루어지지 않는다.
구식(또는 Legacy)은 여전히 힘을 가지고 있으며 이를 인정하고 같이 담아낼 수 있어야 한다.

.. figure:: img/m2block.jpg
   :align: center


때문에 **M2** 는 이미 존재하는 백엔드/콘텐츠/API들과 M2가 제공하는 다양한 모듈들을 실시간 방식(On the fly)으로 연결하는 프레임워크로 진화하고 있다.



콘텐츠 Modernization
----------------------------------------

**M2** 는 아주 효율적인 콘텐츠 생산자(Producer) 이다.

콘텐츠 생산 영역에서 소스 콘텐츠를 만드는 것보다 콘텐츠가 전달력을 가지도록 만드는 것에 더 많은 시간과 비용이 지출된다.

  - 이미지 Reformer를 이용하면 즉 




프로세스 Modernization
----------------------------------------

Connector의 역할

N-to-N Relationship

Object의 세상 → Mesh의 세상

STON은 2차원에서 점과 점을 잇는 세상에 가깝다.

M2는 3차원에서 점-선-면-입체를 연결하는 세상에 가깝다.

단위 기능(점)이 연결되어 면을 이루면, 우리는 이를 작은 단위의 컴포넌트로 명칭할 수 있다.

간단한 예제로, NAS Storage에서 데이터를 가져오는 점 - Object Storage에 백업하는 점 - 이미지를 변환하며 Caching하는 점 - Caching된 이미지를 CDN에 연결하는 점 = 면으로 구성되고, 이것을 우리는 Migration Gateway라 부른다.

X, Y 축으로만 연결을 볼 수 있는 단순한 컴포넌트도 있지만, Z 축까지 복잡하게 연결된 컴포넌트도 존재할 수 있다.

M2는 Mesh의 세상에 살고 있기 때문에, Microservice와 유사한 세계관을 갖는다.



운영 Modernization
----------------------------------------

M2는 레거시와 비지니스 로직의 
성능 = 캐싱

Federator의 역할

Federator의 역할을 통해서 웹 서비스가 Fully Managed된다는 의미를 부여해야한다.

서비스의 복잡도에 따라 어느 임계 지점에서 통제 불능 상태에 빠지게 되는데, 이게 Legacy의 문제를 해결하는데 더욱 복잡하게 만든다. 즉, 해결이 불가능해서 결국 버리게 된다.



커뮤니케이션 Modernization
----------------------------------------



"YouTube 처럼 기획하고 있어요." 
